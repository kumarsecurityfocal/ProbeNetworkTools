modules = ["python-3.11", "nodejs-20", "python3", "postgresql-16"]

[nix]
channel = "stable-24_05"
packages = ["cacert", "cargo", "jq", "libiconv", "libxcrypt", "pgadmin4", "rustc", "whois", "vim"]

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Server"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Backend API"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Build Frontend Fixed"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Build Frontend"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Rebuild Frontend"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Auth Fixer"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "DB Explorer"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Fixed Server"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "ProbeOps Server"

[[workflows.workflow]]
name = "Server"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node server.js"
waitForPort = 5000

[[workflows.workflow]]
name = "Backend API"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "cd backend && uvicorn app.main:app --host 0.0.0.0 --port 8000"
waitForPort = 8000

[[workflows.workflow]]
name = "Build Frontend Fixed"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "cd frontend && npx vite build --outDir=../public"

[[workflows.workflow]]
name = "Build Frontend"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "cd frontend && npm run build"

[[workflows.workflow]]
name = "Rebuild Frontend"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "cd frontend && npx vite build"

[[workflows.workflow]]
name = "Auth Fixer"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node auth-fix.js"
waitForPort = 5000

[[workflows.workflow]]
name = "DB Explorer"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node simple-db-explorer.js"
waitForPort = 7000

[[workflows.workflow]]
name = "Fixed Server"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node -e \"const express = require('express'); const path = require('path'); const http = require('http'); const jwt = require('jsonwebtoken'); const app = express(); const PORT = process.env.PORT || 5000; app.use(express.static(path.join(__dirname, 'public'))); app.use(express.json()); function createToken(email) { return jwt.sign({sub: email, exp: Math.floor(Date.now()/1000) + 86400}, 'super-secret-key-change-in-production'); } app.all('/api*', (req, res) => { let backendPath = req.path; while(backendPath.startsWith('/api')) { backendPath = backendPath.substring(4); } backendPath = backendPath || '/'; if(!backendPath.startsWith('/')) backendPath = '/' + backendPath; console.log(`API: ${req.path} â†’ ${backendPath}`); let token = req.headers.authorization; if(!token && !req.path.includes('/login')) { token = 'Bearer ' + createToken('admin@probeops.com'); } const options = { hostname: 'localhost', port: 8000, path: backendPath, method: req.method, headers: {...req.headers, host: 'localhost:8000'} }; if(token) options.headers.authorization = token; const proxyReq = http.request(options, proxyRes => { res.writeHead(proxyRes.statusCode, proxyRes.headers); proxyRes.pipe(res); }); proxyReq.on('error', () => { res.status(503).json({error: 'Backend unavailable', message: 'Please try again'}); }); if(['POST','PUT','PATCH'].includes(req.method) && req.body) { proxyReq.write(typeof req.body === 'string' ? req.body : JSON.stringify(req.body)); } proxyReq.end(); }); app.get('*', (req, res) => { res.sendFile(path.join(__dirname, 'public', 'index.html')); }); app.listen(PORT, '0.0.0.0', () => console.log(`Server running on port ${PORT}`));\""
waitForPort = 5000

[[workflows.workflow]]
name = "ProbeOps Server"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node no-express-server.js"
waitForPort = 5000

[deployment]
run = ["sh", "-c", "cd frontend && npm install && npm run dev"]

[[ports]]
localPort = 5000
externalPort = 80

[[ports]]
localPort = 7000
externalPort = 3002

[[ports]]
localPort = 7001
externalPort = 3003

[[ports]]
localPort = 7777
externalPort = 3000

[[ports]]
localPort = 8000
externalPort = 8000

[[ports]]
localPort = 8888
externalPort = 3001
