services:
  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env.backend
    environment:
      - SECRET_KEY=${SECRET_KEY:-super-secret-key-change-in-production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
    volumes:
      - ./backend:/app
    networks:
      - probeops-network
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    environment:
      - VITE_API_URL=http://backend:8000
      - NODE_ENV=production
    # No volumes in production - allow the Dockerfile multi-stage build to work properly
    # Development-only volumes are commented out to prevent build artifacts from being overridden
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules
    networks:
      - probeops-network

  # NGINX service (reverse proxy)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - probeops-network
    # Volumes for SSL certificates and webroot for certificate renewal
    # IMPORTANT: Do not mount frontend/dist here in production!
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/ssl/webroot:/var/www/certbot
      - ./nginx/ssl/ssl-dhparams.pem:/etc/letsencrypt/ssl-dhparams.pem
    # The copying of frontend assets is handled by:
    # 1. For production: Two-stage builds in both frontend's and nginx's Dockerfiles
    # 2. For development: Volume mounts in docker-compose.dev.yml

  # Probe service (network diagnostic agent)
  probe:
    build:
      context: ./probe
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./backend/.env.backend
      - ./probe/.env.probe
    environment:
      - API_KEY=${PROBE_API_KEY}
    volumes:
      - ./probe:/app
    networks:
      - probeops-network
    depends_on:
      - backend

  # Database service (for local development only)
  # For production with AWS RDS, comment out this entire service block
  # and set DATABASE_URL in your environment variables or secrets panel
  # Example for AWS RDS: DATABASE_URL=postgresql+psycopg2://username:password@your-rds-endpoint.region.rds.amazonaws.com:5432/dbname

networks:
  probeops-network:
    driver: bridge

# Uncomment this section when using local PostgreSQL
# volumes:
#   postgres-data: