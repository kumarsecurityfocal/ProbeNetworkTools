version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: probeops-backend
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env.backend
    environment:
      - SECRET_KEY=${SECRET_KEY:-super-secret-key-change-in-production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://probeops.com,http://localhost:3000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost,http://localhost:3000,http://127.0.0.1,http://frontend,https://probeops.com,https://www.probeops.com}
      - PROBE_TIMEOUT=${PROBE_TIMEOUT:-5}
    volumes:
      - backend-data:/app/data
    networks:
      - probeops-network
    depends_on:
      - db
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--proxy-headers"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health || exit 0"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Frontend service (build service)
  frontend-build:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: probeops-frontend-build
    volumes:
      - frontend-build:/app/dist
    environment:
      - VITE_API_URL=https://probeops.com/api
      - NODE_ENV=production
    networks:
      - probeops-network
    command: ["npm", "run", "build"]

  # NGINX service (reverse proxy and static file server)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: probeops-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend-build
    networks:
      - probeops-network
    # Volumes for SSL certificates and webroot for certificate renewal
    volumes:
      - ./nginx/certs:/etc/letsencrypt/live/probeops.com
      - ./nginx/ssl/webroot:/var/www/certbot
      - ./nginx/ssl/ssl-dhparams.pem:/etc/letsencrypt/ssl-dhparams.pem
      - frontend-build:/usr/share/nginx/html
    # The copying of frontend assets is handled by:
    # 1. frontend-build service builds the assets
    # 2. volumes share the built assets with nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s

  # Certbot service for SSL certificate renewal
  certbot:
    image: certbot/certbot
    container_name: probeops-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/ssl/webroot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx

  # Database service (for local development only)
  # For production with AWS RDS, comment out this entire service block
  # and set DATABASE_URL in your environment variables or secrets panel
  # Example for AWS RDS: DATABASE_URL=postgresql+psycopg2://username:password@your-rds-endpoint.region.rds.amazonaws.com:5432/dbname
  db:
    image: postgres:15
    container_name: probeops-postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=probeops
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - probeops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  probeops-network:
    driver: bridge

volumes:
  backend-data:
  frontend-build:
  postgres-data: